MODULE Kernel32;
	IMPORT SYSTEM, Trace;
CONST 
	Generic* = TRUE; 
	NULL* = 0; 
	False* = NULL; 
	True* = 1; 
	InvalidHandleValue* =  -1; 
	STDInput* =  -10; 
	STDOutput* =  -11; 
	STDError* =  -12; 
	GenericWrite* = 30; 
	GenericRead* = 31; 
	FileShareRead* = 0; 
	FileShareWrite* = 1; 
	FileShareDelete* = 2; 
	CreateAlways* = 2; 
	OpenExisting* = 3; 
	FileAttributeReadonly* = 0; 
	FileAttributeHidden* = 1; 
	FileAttributeSystem* = 2; 
	FileAttributeDirectory* = 4; 
	FileAttributeArchive* = 5; 
	FileAttributeEncrypted* = 6; 
	FileAttributeNormal* = 7; 
	FileAttributeTemporary* = 8; 
	FileAttributeSparseFILE* = 9; 
	FileAttributeReparsePoint* = 10; 
	FileAttributeCompressed* = 11; 
	FileAttributeOffline* = 12; 
	FileAttributeNotContentIndexed* = 13; 
	FileFlagDeleteOnClose* = 26; 
	FileFlagRandomAccess* = 28; 
	FileFlagOverlapped* = 30; 
	FileFlagWriteThrough* = 31; 
	FileBegin* = 0; 
	MoveFileReplaceExisting* = 0; 
	MoveFileCopyAllowed* = 1; 
	MoveFileWriteThrough* = 3; 
	MEMCommit* = 12; 
	MEMReserve* = 13; 
	MEMDecommit* = 14; 
	MEMRelease* = 15; 
	CreateSuspended* = 2; 
	TLSOutOfIndexes* =  -1; 
	HeapNoSerialize* = 2; 
	HeapGenerateExceptions* = 4; 
	HeapZeroMemory* = 8; 
	PageReadWrite* = 2; 
	PageExecuteReadWrite* = 6; 
	GMemMoveable* = 1; 
	GMemShare* = 13; 
	GMemDDEShare* = GMemShare; 
	MaxPath* = 260; 
	DriveUnknown* = 0; 
	DriveNoRootDir* = 1; 
	DriveRemovable* = 2; 
	DriveFixed* = 3; 
	DriveRemote* = 4; 
	DriveCDRom* = 5; 
	DriveRamDisk* = 6; 
	Infinite* =  -1; 
	WaitObject0* = 0; 
	SizeOf80387Registers* = 80; 
	ExceptionMaximumParameters* = 15; 
	ExceptionGuardPage* = SIGNED32(2147483649); 
	ExceptionBreakPoint* = SIGNED32(2147483651); 
	ExceptionSingleStep* = SIGNED32(2147483652); 
	ExceptionAccessViolation* = SIGNED32(3221225477); 
	ExceptionIllegalInstruction* = SIGNED32(3221225501); 
	ExceptionArrayBoundsExceeded* = SIGNED32(3221225612); 
	ExceptionFltDenormalOperand* = SIGNED32(3221225613); 
	ExceptionFltDivideByZero* = SIGNED32(3221225614); 
	ExceptionFltInexactResult* = SIGNED32(3221225615); 
	ExceptionFltInvalidOperation* = SIGNED32(3221225616); 
	ExceptionFltOverflow* = SIGNED32(3221225617); 
	ExceptionFltStackCheck* = SIGNED32(3221225618); 
	ExceptionFltUndeflow* = SIGNED32(3221225619); 
	ExceptionIntDivideByZero* = SIGNED32(3221225620); 
	ExceptionIntOverflow* = SIGNED32(3221225621); 
	ExceptionPrivInstruction* = SIGNED32(3221225622); 
	ExceptionStackOverflow* = SIGNED32(3221225725); 
	ContextIntel = 16; 
	ContextControl* = {0, ContextIntel}; 
	ContextInteger* = {1, ContextIntel}; 
	ContextSegments* = {2, ContextIntel}; 
	ContextFloatingPoint* = {3, ContextIntel}; 
	ContextDebugRegisters* = {4, ContextIntel}; 
	ContextFull* = ((ContextControl + ContextInteger) + ContextSegments); 
	ExceptionContinueExecution* =  -1; 
	ExceptionContinueSearch* = 0; 
	ExceptionExecuteHandler* = 1; 
	ThreadPriorityIdle* =  -15; 
	ThreadPriorityBelowNormal* =  -1; 
	ThreadPriorityNormal* = 0; 
	ThreadPriorityAboveNormal* = 1; 
	ThreadPriorityHighest* = 2; 
	ThreadPriorityTimeCritical* = 15; 
	ThreadPriorityErrorReturn* = MAX(SIGNED32); 
	WaitFailed* =  -1; 
	WaitTimeout* = 258; 
	SEMFailCriticalErrors* = 0; 
	DuplicateCloseSource* = 0; 
	DuplicateSameAccess* = 1; 
	StartFUseShowWindow* = 0; 
	StartFUseSize* = 1; 
	StartFUsePosition* = 2; 
	VerPlatformWin32s* = 0; 
	VerPlatformWin32Windows* = 1; 
	VerPlatformWin32NT* = 2; 
	SETXOFF* = 1; 
	SETXON* = 2; 
	SETRTS* = 3; 
	CLRRTS* = 4; 
	SETDTR* = 5; 
	CLRDTR* = 6; 
	RESETDEV* = 7; 
	SETBREAK* = 8; 
	CLRBREAK* = 9; 
	PurgeTXAbort* = 0; 
	PurgeRXAbort* = 1; 
	PurgeTXClear* = 2; 
	PurgeRXClear* = 3; 
	EVRXChar* = 0; 
	EVRXFlag* = 1; 
	EVTXEmpty* = 2; 
	EVCTS* = 3; 
	EVDSR* = 4; 
	EVRLSD* = 5; 
	EVBreak* = 6; 
	EVErr* = 7; 
	EVRing* = 8; 
	EVPErr* = 9; 
	EVRX80Full* = 10; 
	EVEvent1* = 11; 
	EVEvent2* = 12; 
	MSCTSOn* = 4; 
	MSDSROn* = 5; 
	MSRingOn* = 6; 
	MSRLSDOn* = 7; 
	NoParity* = 0X; 
	OddParity* = 1X; 
	EvenParity* = 2X; 
	MarkParity* = 3X; 
	SpaceParity* = 4X; 
	OneStopBit* = 0X; 
	One5StopBits* = 1X; 
	TwoStopBits* = 2X; 
	ErrorSuccess* = 0; 
	ErrorFileNotFound* = 2; 
	ErrorAccessDenied* = 5; 
	ErrorInvalidParameter* = 87; 
	ErrorIoPending* = 997; 
TYPE 
	BOOL* = INTEGER; 

	HANDLE* = ADDRESS; 

	HMODULE* = ADDRESS; 

	HINSTANCE* = ADDRESS; 

	ATOM* = SIGNED16; 

	HGLOBAL* = HANDLE; 

	LPSTR* = ADDRESS; 

	DWORD* = SIGNED32; 

	ULONG* = UNSIGNED32; 

	FileTime* = RECORD 
		dwLowDateTime*, dwHighDateTime*: SIGNED32; 
	END; 

	FindData* = RECORD 
		dwFileAttributes*: INTEGERSET; 
		ftCreationTime*, ftLastAccessTime*, ftLastWriteTime*: FileTime; 
		nFileSizeHigh*, nFileSizeLow*: SIGNED32; 
		dwReserved0*, dwReserved1*: SIGNED32; 
		cFileName*: ARRAY MaxPath OF CHAR; 
		cAlternateFileName*: ARRAY 14 OF CHAR; 
	END; 

	SystemTime* = RECORD 
		wYear*, wMonth*, wDayOfWeek*, wDay*: SIGNED16; 
		wHour*, wMinute*, wSecond*, wMilliseconds*: SIGNED16; 
	END; 

	SmallRect* = RECORD 
		left*, top*, right*, bottom*: SIGNED16; 
	END; 

	CriticalSection* = RECORD 
		a, b, c, d, e, f: SIZE; 
	END; 

	FloatingSaveArea* = RECORD 
		ControlWord*, StatusWord*, TagWord*, ErrorOffset*, ErrorSelector*, DataOffset*, DataSelector*: SIGNED32; 
		RegisterArea*: ARRAY SizeOf80387Registers OF SYSTEM.BYTE; 
		Cr0NpxState*: SIGNED32; 
	END; 

	ContextPtr* = POINTER {UNSAFE, UNTRACED} TO Context; 

	Context* = RECORD 
		P1Home, P2Home, P3Home, P4Home, P5Home, P6Home: SIZE; 
		ContextFlags*: INTEGERSET; 
		MxCsr*: DWORD; 
		CS*, DS*, ES*, FS*, GS*, SS*: SIGNED16; 
		FLAGS*: DWORD; 
		Dr0*, Dr1*, Dr2*, Dr3*, Dr6*, Dr7*: SIZE; 
		RA*, RC*, RD*, RB*, SP*, BP*, RSI*, RDI*, R8*, R9*, R10*, R11*, R12*, R13*, R14*, R15*: ADDRESS; 
		PC*: ADDRESS; 
		remainder: ARRAY 1024 OF CHAR; 
	END; 

	ExceptionRecordPtr* = POINTER {UNSAFE, UNTRACED} TO ExceptionRecord; 

	ExceptionRecord* = RECORD 
		ExceptionCode*, ExceptionFlags*: SIGNED32; 
		nextExceptionRecord*{UNTRACED} : ExceptionRecordPtr; 
		ExceptionAddress*: ADDRESS; 
		NumberParameters*: SIGNED32; 
		ExceptionInformation*: ARRAY ExceptionMaximumParameters OF SIGNED32; 
	END; 

	ExcpFrmPtr* = ADDRESS; 

	ExcpFrmHandler* = PROCEDURE {WINAPI}(VAR excpRec: ExceptionRecord; excpFrame: ExcpFrmPtr; VAR context: Context; dispatch: SIGNED32):SIGNED32; 

	ExceptionPointers* = RECORD 
		exception*{UNTRACED} : ExceptionRecordPtr; 
		context*: ContextPtr; 
	END; 

	VectoredExceptionHandler* = PROCEDURE {WINAPI}(CONST e: ExceptionPointers):DWORD; 

	ExcpFrm* = RECORD 
		link*: ExcpFrmPtr; 
		handler*: ExcpFrmHandler; 
	END; 

	Object* = POINTER TO RECORD 
		handle*: HANDLE; 
	END; 

	LargeInteger* = RECORD 
		LowPart*, HighPart*: SIGNED32; 
		QuadPart*{OFFSET(0)} : SIGNED64; 
	END; 

	ULargeInteger* = LargeInteger; 

	MemoryStatusEx* = RECORD 
		dwLength*: SIGNED32; 
		dwMemoryLoad*: SIGNED32; 
		ullTotalPhys*: SIGNED64; 
		ullAvailPhys*: SIGNED64; 
		ullTotalPageFile*: SIGNED64; 
		ullAvailPageFile*: SIGNED64; 
		ullTotalVirtual*: SIGNED64; 
		ullAvailVirtual*: SIGNED64; 
		ullAvailExtendedVirtual*: SIGNED64; 
	END; 

	ThreadProc* = PROCEDURE {WINAPI}(lpParameter{UNTRACED} : ANY):SIGNED32; 

	ProcessInformation* = RECORD 
		hProcess*, hThread*: HANDLE; 
		dwProcessId*, dwThreadId*: SIGNED32; 
	END; 

	StartupInfo* = RECORD 
		cb*: SIGNED32; 
		lpReserved*, lpDesktop*, lpTitle*: LPSTR; 
		dwX*, dwY*, dwXSize*, dwYSize*: SIGNED32; 
		dwXCountChars*, dwYCountChars*: SIGNED32; 
		dwFillAttribute*: SIGNED32; 
		dwFlags*: INTEGERSET; 
		wShowWindow*, cbReserved2*: SIGNED16; 
		lpReserved2*: ADDRESS; 
		hStdInput*, hStdOutput*, hStdError*: HANDLE; 
	END; 

	OSVersionInfo* = RECORD 
		dwOSVersionInfoSize*, dwMajorVersion*, dwMinorVersion*, dwBuildNumber*, dwPlatformId*: SIGNED32; 
		szCSDVersion*: ARRAY 128 OF CHAR; 
	END; 

	Exception* = RECORD 
		exc*: ExceptionRecord; 
		cont*: Context; 
	END; 

	CommTimeouts* = RECORD 
		ReadIntervalTimeout*, ReadTotalTimeoutMultiplier*, ReadTotalTimeoutConstant*, WriteTotalTimeoutMultiplier*, WriteTotalTimeoutConstant*: SIGNED32; 
	END; 

	DCB* = RECORD 
		DCBlength*, BaudRate*: SIGNED32; 
		flags*: DWORD; 
		wReserved*, XonLim*, XoffLim*: SIGNED16; 
		ByteSize*, Parity*, StopBits*, XonChar*, XoffChar*, ErrorChar*, EofChar*, EvtChar*: CHAR; 
		wReserved1*: SIGNED16; 
	END; 

	ComStat* = RECORD 
		status*: DWORD; 
		cbInQue*, cbOutQue*: SIGNED32; 
	END; 

	SystemInfo* = RECORD 
		wProcessorArchitecture*: SIGNED16; 
		wReserved: SIGNED16; 
		dwPageSize*: SIGNED32; 
		lpMinimumApplicationAddress*: ADDRESS; 
		lpMaximumApplicationAddress*: ADDRESS; 
		dwActiveProcessorMask*: ADDRESS; 
		dwNumberOfProcessors*: SIGNED32; 
		dwProcessorType*: SIGNED32; 
		dwAllocationGranularity*: SIGNED32; 
		wProcessorLevel*: SIGNED16; 
		wProcessorRevision*: SIGNED16; 
	END; 

	TimeZoneInformation* = RECORD 
		Bias*: SIGNED32; 
		StandardName*: ARRAY 32 OF SIGNED16; 
		StandardDate*: SystemTime; 
		StandardBias*: SIGNED32; 
		DaylightName*: ARRAY 32 OF SIGNED16; 
		DaylightDate*: SystemTime; 
		DaylightBias*: SIGNED32; 
	END; 

	Overlapped* = RECORD 
		Internal*: SIGNED32; 
		InternalHigh*: SIGNED32; 
		Offset*: SIGNED32; 
		OffsetHigh*: SIGNED32; 
		hEvent*: HANDLE; 
	END; 
VAR 
	hInstance-: HINSTANCE; 
	isEXE-: BOOLEAN; 
	getProcAddress-: PROCEDURE {WINAPI}(hModule: HMODULE; CONST lpProcName: ARRAY OF CHAR):ADDRESS; 
	LoadLibrary-: PROCEDURE {WINAPI}(CONST lpLibFileName: ARRAY OF CHAR):HINSTANCE; 
	LoadLibraryEx-: PROCEDURE {WINAPI}(CONST lpLibFileName: ARRAY OF CHAR; hFile: HANDLE; dwFlags: INTEGERSET):HINSTANCE; 
	AddVectoredContinueHandler-: PROCEDURE {WINAPI}(firstHandler: ULONG; vectoredHandler: VectoredExceptionHandler); 
	AddVectoredExceptionHandler-: PROCEDURE {WINAPI}(firstHandler: ULONG; vectoredHandler: VectoredExceptionHandler); 
	AllocConsole-: PROCEDURE {WINAPI}():BOOL; 
	AttachConsole-: PROCEDURE {WINAPI}(in: SIGNED32):BOOL; 
	Beep-: PROCEDURE {WINAPI}(dwFreq, dwDuration: SIGNED32):BOOL; 
	CancelIoEx-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpOverlapped: Overlapped):BOOL; 
	ClearCommBreak-: PROCEDURE {WINAPI}(hFile: HANDLE):BOOL; 
	ClearCommError-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpErrors: DWORD; VAR lpStat: ComStat):BOOL; 
	CloseHandle-: PROCEDURE {WINAPI}(hObject: HANDLE):BOOL; 
	CopyFile-: PROCEDURE {WINAPI}(VAR lpExistingFileName, lpNewFileName: ARRAY OF CHAR; bFailIfExists: BOOL):BOOL; 
	CreateDirectory-: PROCEDURE {WINAPI}(VAR lpPathName: ARRAY OF CHAR; lpSecurityAttributes: ANY):BOOL; 
	CreateEvent-: PROCEDURE {WINAPI}(lpEventAttributes: ANY; bManualReset, bInitialState: BOOL; CONST lpName: ARRAY OF CHAR):HANDLE; 
	CreateFile-: PROCEDURE {WINAPI}(CONST lpFileName: ARRAY OF CHAR; dwDesiredAccess, dwShareMode: INTEGERSET; lpSecurityAttributes: ANY; dwCreationDistribution: SIGNED32; dwFlagsAndAttributes: INTEGERSET; hTemplateFile: HANDLE):HANDLE; 
	CreateProcess-: PROCEDURE {WINAPI}(CONST lpApplicationName, lpCommandLine: ARRAY OF CHAR; lpProcessAttributes, lpThreadAttributes: ANY; bInheritHandles: BOOL; dwCreationFlags: SIGNED32; lpEnvironment: ANY; VAR lpCurrentDirectory: ARRAY OF CHAR; VAR lpStartupInfo: StartupInfo; VAR lpProcessInformation: ProcessInformation):BOOL; 
	CreateSemaphore-: PROCEDURE {WINAPI}(lpThreadAttributes: ADDRESS; lInitialCount: SIGNED32; lMaximumCount: SIGNED32; lpName: LPSTR):HANDLE; 
	CreateThread-: PROCEDURE {WINAPI}(lpThreadAttributes: ADDRESS; dwStackSize: SIGNED32; lpStartAddress: ThreadProc; lpParameter: ANY; dwCreationFlags: INTEGERSET; VAR lpThreadId: SIGNED32):HANDLE; 
	DeleteCriticalSection-: PROCEDURE {WINAPI}(VAR lpCriticalSection: CriticalSection); 
	DeleteFile-: PROCEDURE {WINAPI}(VAR lpFileName: ARRAY OF CHAR):BOOL; 
	DisableThreadLibraryCalls-: PROCEDURE {WINAPI}(hLibModule: HMODULE):BOOL; 
	DuplicateHandle-: PROCEDURE {WINAPI}(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle: HANDLE; VAR lpTargetHandle: HANDLE; dwDesiredAccess: INTEGERSET; bInheritHandle: BOOL; dwOptions: INTEGERSET):BOOL; 
	EnterCriticalSection-: PROCEDURE {WINAPI}(VAR lpCriticalSection: CriticalSection); 
	EscapeCommFunction-: PROCEDURE {WINAPI}(hFile: HANDLE; dwFunc: SIGNED32):BOOL; 
	ExitProcess-: PROCEDURE {WINAPI}(uExitCode: SIGNED32); 
	ExitThread-: PROCEDURE {WINAPI}(dwExitCode: SIGNED32); 
	FileTimeToLocalFileTime-: PROCEDURE {WINAPI}(VAR lpFileTime: FileTime; VAR lpLocalFileTime: FileTime):BOOL; 
	FileTimeToSystemTime-: PROCEDURE {WINAPI}(VAR lpFileTime: FileTime; VAR lpSystemTime: SystemTime):BOOL; 
	FindClose-: PROCEDURE {WINAPI}(hFindFile: HANDLE):BOOL; 
	FindFirstFile-: PROCEDURE {WINAPI}(VAR lpFileName: ARRAY OF CHAR; VAR lpFindFileDate: FindData):HANDLE; 
	FindNextFile-: PROCEDURE {WINAPI}(hFindFile: HANDLE; VAR lpFindFileDate: FindData):BOOL; 
	FlushFileBuffers-: PROCEDURE {WINAPI}(hFile: HANDLE):BOOL; 
	FreeConsole-: PROCEDURE {WINAPI}():BOOL; 
	FreeLibrary-: PROCEDURE {WINAPI}(hLibModule: HMODULE):BOOL; 
	GetCommandLine-: PROCEDURE {WINAPI}():LPSTR; 
	GetCommModemStatus-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpModemStat: INTEGERSET):BOOL; 
	GetCommState-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpDCB: DCB):BOOL; 
	GetComputerName-: PROCEDURE {WINAPI}(VAR lpBuffer: ARRAY OF CHAR; VAR lpnSize: SIGNED32):BOOL; 
	GetCurrentDirectory-: PROCEDURE {WINAPI}(nBufferLength: SIGNED32; VAR lpBuffer: ARRAY OF CHAR):SIGNED32; 
	GetCurrentProcess-: PROCEDURE {WINAPI}():HANDLE; 
	GetCurrentProcessId-: PROCEDURE {WINAPI}():SIGNED32; 
	GetCurrentThread-: PROCEDURE {WINAPI}():HANDLE; 
	GetCurrentThreadId-: PROCEDURE {WINAPI}():SIGNED32; 
	GetCurrentThreadStackLimits-: PROCEDURE {WINAPI}(VAR lowLimit, highLimit: SIZE); 
	GetDiskFreeSpace-: PROCEDURE {WINAPI}(VAR lpRootPathName: ARRAY OF CHAR; VAR lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: SIGNED32):BOOL; 
	GetDriveType-: PROCEDURE {WINAPI}(VAR lpRootPathName: ARRAY OF CHAR):SIGNED32; 
	GetExitCodeProcess-: PROCEDURE {WINAPI}(hProcess: HANDLE; VAR lpExitCode: SIGNED32):BOOL; 
	GetFileAttributes-: PROCEDURE {WINAPI}(CONST lpFileName: ARRAY OF CHAR):INTEGERSET; 
	GetFileSize-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpFileSizeHigh: SIGNED32):SIGNED32; 
	GetFileSizeEx-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpFileSize: SIGNED64):BOOL; 
	GetFileTime-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpCreationTime, lpLastAccessTime, lpLastWriteTime: FileTime):BOOL; 
	GetFullPathName-: PROCEDURE {WINAPI}(CONST lpFileName: ARRAY OF CHAR; nBufferLength: SIGNED32; VAR lpBuffer: ARRAY OF CHAR; lpFilePart: LPSTR):SIGNED32; 
	GetLastError-: PROCEDURE {WINAPI}():SIGNED32; 
	GetLocalTime-: PROCEDURE {WINAPI}(VAR lpSystemTime: SystemTime); 
	GetLogicalDriveStrings-: PROCEDURE {WINAPI}(nBufferLength: SIGNED32; VAR lpBuffer: ARRAY OF CHAR):SIGNED32; 
	GetLogicalDrives-: PROCEDURE {WINAPI}():INTEGERSET; 
	GetModuleFileName-: PROCEDURE {WINAPI}(hModule: HMODULE; VAR lpFileName: ARRAY OF CHAR; nSize: DWORD):SIGNED32; 
	GetModuleHandle-: PROCEDURE {WINAPI}(CONST lpModuleName: ARRAY OF CHAR):HMODULE; 
	GetOverlappedResult-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpOverlapped: Overlapped; VAR lpNumberOfBytesTransferred: SIGNED32; bWait: BOOL):BOOL; 
	GetPrivateProfileString-: PROCEDURE {WINAPI}(CONST lpAppName: ARRAY OF CHAR; CONST lpKeyName: ARRAY OF CHAR; CONST lpDefault: ARRAY OF CHAR; VAR lpReturnedString: ARRAY OF CHAR; nSize: DWORD; CONST lpFileName: ARRAY OF CHAR):SIGNED32; 
	GetProcessAffinityMask-: PROCEDURE {WINAPI}(hProcess: HANDLE; lpProcessAffinityMask: ADDRESS; lpSystemAffinityMask: ADDRESS):BOOL; 
	GetProcessHeap-: PROCEDURE {WINAPI}():HANDLE; 
	GetProcessTimes-: PROCEDURE {WINAPI}(CONST hProcess: HANDLE; VAR lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: FileTime):SIGNED32; 
	GetStartupInfo-: PROCEDURE {WINAPI}(VAR lpStartupInfo: StartupInfo); 
	GetSystemInfo-: PROCEDURE {WINAPI}(VAR lpSystemInfo: SystemInfo); 
	GetStdHandle-: PROCEDURE {WINAPI}(nStdHandle: SIGNED32):HANDLE; 
	GetSystemTime-: PROCEDURE {WINAPI}(VAR lpSystemTime: SystemTime); 
	GetTempFileName-: PROCEDURE {WINAPI}(VAR lpPathName, lpPrefixName: ARRAY OF CHAR; uUnique: SIGNED32; VAR lpTempFileName: ARRAY OF CHAR):SIGNED32; 
	GetTempPath-: PROCEDURE {WINAPI}(nBufferLength: SIGNED32; VAR lpBuffer: ARRAY OF CHAR):SIGNED32; 
	GetThreadContext-: PROCEDURE {WINAPI}(hThread: HANDLE; VAR lpContext: Context):BOOL; 
	GetThreadPriority-: PROCEDURE {WINAPI}(hThread: HANDLE):SIGNED32; 
	GetThreadTimes-: PROCEDURE {WINAPI}(hThread: HANDLE; VAR lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: FileTime):SIGNED32; 
	GetTickCount-: PROCEDURE {WINAPI}():SIGNED32; 
	GetTimeZoneInformation-: PROCEDURE {WINAPI}(VAR lpTimeZoneInformation: TimeZoneInformation):SIGNED32; 
	GetWindowsDirectory-: PROCEDURE {WINAPI}(VAR lpBuffer: ARRAY OF CHAR; nBufferLength: SIGNED32):SIGNED32; 
	GetVersion-: PROCEDURE {WINAPI}():SIGNED32; 
	GetVersionEx-: PROCEDURE {WINAPI}(VAR lpVersionInfo: OSVersionInfo):BOOL; 
	GetVolumeInformation-: PROCEDURE {WINAPI}(VAR lpRootPathName: ARRAY OF CHAR; VAR lpVolumeNameBuffer: ARRAY OF CHAR; nVolumeNameSize: SIGNED32; VAR lpVolumeSerialNumber: SIGNED32; VAR lpMaximumComponentLength: SIGNED32; VAR lpFileSystemFlags: SIGNED32; VAR lpFileSystemNameBuffer: ARRAY OF CHAR; nFileSystemNameSize: SIGNED32):SIGNED32; 
	GlobalAddAtom-: PROCEDURE {WINAPI}(VAR lpString: ARRAY OF CHAR):ATOM; 
	GlobalAlloc-: PROCEDURE {WINAPI}(uFlags: INTEGERSET; dwBytes: SIZE):HGLOBAL; 
	GlobalDeleteAtom-: PROCEDURE {WINAPI}(nAtom: ATOM):ATOM; 
	GlobalLock-: PROCEDURE {WINAPI}(hMem: HGLOBAL):ADDRESS; 
	GlobalMemoryStatusEx-: PROCEDURE {WINAPI}(VAR lpBuffer: MemoryStatusEx):BOOL; 
	GlobalReAlloc-: PROCEDURE {WINAPI}(hMem: HGLOBAL; dwBytes: SIGNED32; uFlags: DWORD):HGLOBAL; 
	GlobalSize-: PROCEDURE {WINAPI}(hMem: HGLOBAL):SIZE; 
	GlobalUnlock-: PROCEDURE {WINAPI}(hMem: HGLOBAL):BOOL; 
	HeapAlloc-: PROCEDURE {WINAPI}(hHeap: HANDLE; dwFlags: SIGNED32; size: SIZE):ADDRESS; 
	HeapFree-: PROCEDURE {WINAPI}(hHeap: HANDLE; dwFlags: SIGNED32; lpMem: ADDRESS):ADDRESS; 
	InitializeCriticalSection-: PROCEDURE {WINAPI}(VAR lpCriticalSection: CriticalSection); 
	InterlockedDecrement-: PROCEDURE {WINAPI}(VAR lpAddend: SIGNED32):SIGNED32; 
	InterlockedIncrement-: PROCEDURE {WINAPI}(VAR lpAddend: SIGNED32):SIGNED32; 
	LeaveCriticalSection-: PROCEDURE {WINAPI}(VAR lpCriticalSection: CriticalSection); 
	LocalFileTimeToFileTime-: PROCEDURE {WINAPI}(VAR lpLocalFileTime: FileTime; VAR lpFileTime: FileTime):BOOL; 
	MoveFileEx-: PROCEDURE {WINAPI}(VAR lpExistingFileName, lpNewFileName: ARRAY OF CHAR; dwFlags: INTEGERSET):BOOL; 
	outputDebugString-: PROCEDURE {WINAPI}(CONST lpOutputString: ARRAY OF CHAR); 
	IsDebuggerPresent-: PROCEDURE {WINAPI}():BOOL; 
	PurgeComm-: PROCEDURE {WINAPI}(hFile: HANDLE; dwFlags: INTEGERSET):BOOL; 
	QueryDosDevice-: PROCEDURE {WINAPI}(CONST lpDeviceName: ARRAY OF CHAR; VAR lpTargetPath: ARRAY OF CHAR; ucchMax: SIGNED32):SIGNED32; 
	QueryPerformanceCounter-: PROCEDURE {WINAPI}(VAR lpPerformaceCount: LargeInteger):BOOL; 
	QueryPerformanceFrequency-: PROCEDURE {WINAPI}(VAR lpFrequency: LargeInteger):BOOL; 
	QueryThreadCycleTime-: PROCEDURE {WINAPI}(hThread: HANDLE; VAR cycleTime: SIGNED64):BOOL; 
	ReadFile-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpBuffer: ARRAY OF SYSTEM.BYTE; nNumberOfBytesToRead: SIGNED32; VAR lpNumberOfBytesRead: SIGNED32; VAR lpOverlapped: Overlapped):BOOL; 
	ReadProcessMemory-: PROCEDURE {WINAPI}(hProcess: HANDLE; lpBaseAddress: ADDRESS; VAR lpBuffer: ARRAY OF SYSTEM.BYTE; nSize: SIGNED32; VAR lpNumberOfBytesRead: SIGNED32):BOOL; 
	ReleaseSemaphore-: PROCEDURE {WINAPI}(hSemaphore: HANDLE; lReleaseCount: SIGNED32; lpPreviousCount: ADDRESS):BOOL; 
	RemoveDirectory-: PROCEDURE {WINAPI}(VAR lpPathName: ARRAY OF CHAR):BOOL; 
	RemoveVectoredContinueHandler-: PROCEDURE {WINAPI}(vectoredHandler: VectoredExceptionHandler):ULONG; 
	RemoveVectoredExceptionHandler-: PROCEDURE {WINAPI}(vectoredHandler: VectoredExceptionHandler):ULONG; 
	ResetEvent-: PROCEDURE {WINAPI}(hEvent: HANDLE):BOOL; 
	ResumeThread-: PROCEDURE {WINAPI}(hThread: HANDLE):SIGNED32; 
	SearchPath-: PROCEDURE {WINAPI}(CONST lpPath, lpFileName, lpExtension: ARRAY OF CHAR; nBufferLength: DWORD; VAR lpBuffer: ARRAY OF CHAR; VAR lpFilePart: LPSTR):SIGNED32; 
	SetCommBreak-: PROCEDURE {WINAPI}(hFile: HANDLE):BOOL; 
	SetCommMask-: PROCEDURE {WINAPI}(hFile: HANDLE; dwEvtMask: DWORD):BOOL; 
	SetCommState-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpDCB: DCB):BOOL; 
	SetCommTimeouts-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpCommTimeouts: CommTimeouts):BOOL; 
	SetConsoleCursorPosition-: PROCEDURE {WINAPI}(hConsoleOutput: HANDLE; dwCursorPosition: SIGNED32):BOOL; 
	SetConsoleScreenBufferSize-: PROCEDURE {WINAPI}(hConsoleOuput: HANDLE; dwSize: SIGNED32):BOOL; 
	SetConsoleTextAttribute-: PROCEDURE {WINAPI}(hConsoleOutput: HANDLE; wAttributes: SIGNED32):BOOL; 
	SetConsoleTitle-: PROCEDURE {WINAPI}(VAR lpConsoleTitle: ARRAY OF CHAR):BOOL; 
	SetConsoleWindowInfo-: PROCEDURE {WINAPI}(hConsoleOuput: HANDLE; bAbsolute: BOOL; VAR lpConsoleWindow: SmallRect):BOOL; 
	SetCurrentDirectory-: PROCEDURE {WINAPI}(VAR lpPathName: ARRAY OF CHAR):BOOL; 
	SetErrorMode-: PROCEDURE {WINAPI}(uMode: DWORD):DWORD; 
	SetEndOfFile-: PROCEDURE {WINAPI}(hFile: HANDLE):BOOL; 
	SetEvent-: PROCEDURE {WINAPI}(hEvent: HANDLE):BOOL; 
	SetFileAttributes-: PROCEDURE {WINAPI}(VAR lpFileName: ARRAY OF CHAR; dwFileAttributes: INTEGERSET):BOOL; 
	SetFilePointer-: PROCEDURE {WINAPI}(hFile: HANDLE; lDistanceToMove: SIGNED32; VAR lpDistanceToMoveHigh: SIGNED32; dwMoveMethod: SIGNED32):SIGNED32; 
	SetFilePointerEx-: PROCEDURE {WINAPI}(hFile: HANDLE; lDistanceToMove: SIGNED64; VAR lpNewFilePointer: SIGNED64; dwMoveMethod: SIGNED32):BOOL; 
	SetFileTime-: PROCEDURE {WINAPI}(hFile: HANDLE; VAR lpCreationTime, lpLastAccessTime, lpLastWriteTime: FileTime):BOOL; 
	SetLocalTime-: PROCEDURE {WINAPI}(VAR lpSystemTime: SystemTime):BOOL; 
	SetThreadAffinityMask-: PROCEDURE {WINAPI}(hThread: HANDLE; dwThreadAffinityMask: DWORD):DWORD; 
	SetThreadContext-: PROCEDURE {WINAPI}(hThread: HANDLE; VAR lpContext: Context):BOOL; 
	SetThreadPriority-: PROCEDURE {WINAPI}(hThread: HANDLE; nPriority: SIGNED32):BOOL; 
	SetupComm-: PROCEDURE {WINAPI}(hFile: HANDLE; dwInQueue, dwOutQueue: SIGNED32):BOOL; 
	Sleep-: PROCEDURE {WINAPI}(dwMilliseconds: SIGNED32); 
	SuspendThread-: PROCEDURE {WINAPI}(hThread: HANDLE):SIGNED32; 
	SystemTimeToFileTime-: PROCEDURE {WINAPI}(VAR lpSystemTime: SystemTime; VAR lpFileTime: FileTime):BOOL; 
	TerminateThread-: PROCEDURE {WINAPI}(hThread: HANDLE; dwExitCode: SIGNED32):BOOL; 
	TlsAlloc-: PROCEDURE {WINAPI}():SIGNED32; 
	TlsFree-: PROCEDURE {WINAPI}(dwTlsIndex: SIGNED32):BOOL; 
	TlsGetValue-: PROCEDURE {WINAPI}(dwTlsIndex: SIGNED32):ADDRESS; 
	TlsSetValue-: PROCEDURE {WINAPI}(dwTlsIndex: SIGNED32; lpTlsValue: ADDRESS):BOOL; 
	TryEnterCriticalSection-: PROCEDURE {WINAPI}(VAR lpCriticalSection: CriticalSection):BOOL; 
	VirtualAlloc-: PROCEDURE {WINAPI}(lpAddress: ADDRESS; dwSize: SIZE; flAllocationType, flProtect: INTEGERSET):ADDRESS; 
	VirtualFree-: PROCEDURE {WINAPI}(lpAddress: ADDRESS; dwSize: SIZE; dwFreeType: INTEGERSET):BOOL; 
	WaitForSingleObject-: PROCEDURE {WINAPI}(hHandle: HANDLE; dwMilliseconds: SIGNED32):SIGNED32; 
	WriteFile-: PROCEDURE {WINAPI}(hFile: HANDLE; CONST lpBuffer: ARRAY OF SYSTEM.BYTE; nNumberOfBytesToWrite: DWORD; VAR lpNumberOfBytesWritten: DWORD; VAR lpOverlapped: Overlapped):BOOL; 
	OutputString*: PROCEDURE (CONST a: ARRAY OF CHAR); 
	Shutdown*: PROCEDURE (code: SIGNED32); 
	g: BOOLEAN; 
	hout: HANDLE; 

	PROCEDURE ^ GetProcAddress*(hModule: HMODULE; CONST procName: ARRAY OF CHAR; VAR adr: ADDRESS); 
	PROCEDURE ^ CopyString*(lpString: LPSTR; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ OutputDebugString*(CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ NoOutputString(CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ ConsoleString(CONST str: ARRAY OF CHAR); 
	PROCEDURE ^ TraceChar(c: CHAR); 
	PROCEDURE ^ SendToDebugger*(CONST str: ARRAY OF CHAR; x: ADDRESS); 
	PROCEDURE ^ ShutdownP(l: SIGNED32); 
	PROCEDURE ^ Init*; 
	PROCEDURE ^ SetTraceConsole; 
	PROCEDURE ^ {OFFSET(4198400)} EntryPoint*; 
BEGIN
END Kernel32.
