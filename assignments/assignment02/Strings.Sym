MODULE Strings;
	IMPORT SYSTEM, Utils;
CONST 

	PROCEDURE ^ Length*(CONST s: ARRAY OF CHAR): SIZE; 
	PROCEDURE ^ Min(a, b: INTEGER): INTEGER; 
	PROCEDURE ^ Compare*(CONST s1, s2: ARRAY OF CHAR): INTEGER; 
	PROCEDURE ^ EqualIgnoreCase*(CONST s1, s2: ARRAY OF CHAR): BOOLEAN; 
	PROCEDURE ^ StrToInt*(CONST str: ARRAY OF CHAR; VAR val: INTEGER; VAR res: BOOLEAN); 
	PROCEDURE ^ Find*(ch: CHAR; CONST s: ARRAY OF CHAR; start: SIZE): SIZE; 
	PROCEDURE ^ FindString*(CONST pat, s: ARRAY OF CHAR; start: SIZE): SIZE; 
	PROCEDURE ^ Copy*(CONST source: ARRAY OF CHAR; VAR dest: ARRAY OF CHAR); 
	PROCEDURE ^ IntToStr*(val: INTEGER; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ BoolToStr*(CONST bool: BOOLEAN; VAR str: ARRAY OF CHAR); 
	PROCEDURE ^ StrToBool*(CONST str: ARRAY OF CHAR; VAR bool: BOOLEAN; VAR res: BOOLEAN); 
	PROCEDURE ^ Expo*(x: FLOAT32): INTEGER; 
	PROCEDURE ^ Ten(e: INTEGER): FLOAT32; 
	PROCEDURE ^ NaNCode(x: FLOAT32): SIGNED32; 
	PROCEDURE ^ Append*(VAR to: ARRAY OF CHAR; CONST this: ARRAY OF CHAR); 
	PROCEDURE ^ AppendChar*(VAR to: ARRAY OF CHAR; c: CHAR); 
	PROCEDURE ^ AppendReal*(VAR str: ARRAY OF CHAR; x: FLOAT32); 
	PROCEDURE ^ AppendInt*(VAR to: ARRAY OF CHAR; i: INTEGER); 
	PROCEDURE ^ AppendSet*(VAR to: ARRAY OF CHAR; s: SET); 
	PROCEDURE ^ AppendBool*(VAR to: ARRAY OF CHAR; b: BOOLEAN); 
	PROCEDURE ^ RealToStr*(r: FLOAT32; VAR str: ARRAY OF CHAR); 
BEGIN
END Strings.
