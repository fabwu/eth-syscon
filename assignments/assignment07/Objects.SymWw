MODULE Objects;
	IMPORT SYSTEM, Trace, Kernel32, Machine, Modules, Heaps;
CONST 
	HandleExcp = TRUE; 
	TraceVerbose = FALSE; 
	StrongChecks = TRUE; 
	defaultStackSize = 0; 
	TraceOpenClose = FALSE; 
	ConcurrentGC = TRUE; 
	Restart* = 0; 
	PleaseHalt* = 10; 
	Unbreakable* = 11; 
	SelfTermination* = 12; 
	Preempted* = 27; 
	Resistant* = 28; 
	PleaseStop* = 31; 
	External = 13; 
	InActive* = 26; 
	Unknown* = 0; 
	Ready* = 1; 
	Running* = 2; 
	AwaitingLock* = 3; 
	AwaitingCond* = 4; 
	AwaitingEvent* = 5; 
	Suspended* = 6; 
	Terminated* = 7; 
	MinPriority = 0; 
	Low* = 1; 
	Normal* = 2; 
	High* = 3; 
	GCPriority* = 4; 
	Realtime* = 5; 
	halt* = 2222; 
	haltUnbreakable* = 2223; 
TYPE 
	CpuCyclesArray* = ARRAY Machine.MaxCPU OF SIGNED64; 

	ProtectedObject = POINTER TO RECORD 
	END; 

	ProcessQueue = Heaps.ProcessQueue; 

	Body = PROCEDURE (self: ProtectedObject); 

	Condition = PROCEDURE (slink: ADDRESS):BOOLEAN; 

	EventHandler* = PROCEDURE {DELEGATE}; 

	RealtimeEventHandler* = PROCEDURE {DELEGATE}; 

	Timer* = POINTER TO RECORD 
		next, prev: Timer; 
		trigger: SIGNED32; 
		handler: EventHandler; 
	END; 

	Clock = OBJECT {EXCLUSIVE} 
	VAR 
		h: Timer; 
		ticks: SIGNED32; 
		hevent: Kernel32.HANDLE; 
		res: Kernel32.BOOL; 
		mode: SIGNED32; 
		process: Process; 
		exiting: BOOLEAN; 

		PROCEDURE ^ Wakeup; 
		PROCEDURE ^ Exit; 
		PROCEDURE ^ Finalize(ptr: ANY); 
		PROCEDURE ^  & Init*; 
	BEGIN{ACTIVE, SAFE, PRIORITY(High)} 
	END Clock; 

	Win32Event = Kernel32.HANDLE; 

	GCContext = RECORD 
		nextPos: SIZE; 
		last: ARRAY 32 OF RECORD 
			bp, pc, sp: ADDRESS; 
		END; 

		PROCEDURE ^ AddContext(bp, pc, sp: ADDRESS); 
		PROCEDURE ^ GetNextContext(VAR pos: SIZE; VAR bp, pc, sp: ADDRESS): BOOLEAN; 
		PROCEDURE ^ RemoveContext; 
	END
	; 

	Process* = OBJECT (Heaps.ProcessLink)
	VAR 
		obj-: ProtectedObject; 
		state-{ALIGNED(16)} : Kernel32.Context; 
		condition-: Condition; 
		condFP-: ADDRESS; 
		mode-: SIGNED32; 
		procID-: SIGNED32; 
		waitingOn-: ProtectedObject; 
		id-: INTEGER; 
		flags*: SET; 
		priority-: SIGNED32; 
		stackBottom: ADDRESS; 
		handle-: Kernel32.HANDLE; 
		body: Body; 
		event: Win32Event; 
		restartPC-: ADDRESS; 
		restartSP-: ADDRESS; 
		lastThreadTimes: SIGNED64; 
		gcContext: GCContext; 
		context: ANY; 

		PROCEDURE ^ FindRoots*; 
	END Process; 

	ExceptionHandler* = PROCEDURE (VAR context: Kernel32.Context; VAR excpRec: Kernel32.ExceptionRecord; VAR handled: BOOLEAN); 

	GCStatusExt = OBJECT (Heaps.GCStatus)

		PROCEDURE ^ SetgcOngoing*(value: BOOLEAN); 
	END GCStatusExt; 

	FinalizerCaller = OBJECT {EXCLUSIVE} 
	VAR 
		n: Heaps.FinalizerNode; 
		event: Kernel32.HANDLE; 
		process: Process; 
		exiting: BOOLEAN; 

		PROCEDURE ^  & Init; 
		PROCEDURE ^ Wait(): BOOLEAN; 
		PROCEDURE ^ Activate; 
	BEGIN{ACTIVE, SAFE, PRIORITY(High)} 
	END FinalizerCaller; 
VAR 
	awc-, awl-: SIGNED32; 
	oberonLoop*: ANY; 
	break: ARRAY 16 OF CHAR; 
	terminateProc: PROCEDURE ; 
	ready: ProcessQueue; 
	startedMainProcess := FALSE: BOOLEAN; 
	gcProcess: Process; 
	numberOfProcessors: SIGNED32; 
	finalizerCaller: FinalizerCaller; 
	event: Timer; 
	clock: Clock; 
	tlsIndex: SIGNED32; 
	nProcs: SIGNED32; 
	excplock: Kernel32.CriticalSection; 
	exceptionhandler: ExceptionHandler; 
	globalRunning: Process; 
	GetProcedureName*: PROCEDURE (pc: ADDRESS; VAR n: ARRAY OF CHAR; VAR spc: ADDRESS); 
	TraceProcessHook*: PROCEDURE (prcoess: Process; pc, bp: ADDRESS; stacklow, stackhigh: ADDRESS); 

	PROCEDURE ^ SetPriority*(priority: SIGNED32); 
	PROCEDURE ^ LockedByCurrent*(obj: ANY): BOOLEAN; 
	PROCEDURE ^ Yield*; 
	PROCEDURE ^ CurrentProcess*(): Process; 
	PROCEDURE ^ CurrentContext*(): ANY; 
	PROCEDURE ^ SetContext*(context: ANY); 
	PROCEDURE ^ GetStackBottom*(p: Process): ADDRESS; 
	PROCEDURE ^ GetStack*(p: Process; VAR pc, bp, sp, sb: ADDRESS; VAR contextPos: SIZE); 
	PROCEDURE ^ NextValidStackSegment*(p: Process; VAR bp, pc, sp: ADDRESS; VAR contextPos: SIZE): BOOLEAN; 
	PROCEDURE ^ ActiveObject*(): ANY; 
	PROCEDURE ^ GetProcessID*(): INTEGER; 
	PROCEDURE ^ Get(VAR queue: ProcessQueue; VAR new: Process); 
	PROCEDURE ^ Put(VAR queue: ProcessQueue; t: Process); 
	PROCEDURE ^ {WINAPI} ExcpFrmHandler(CONST exceptionPointers: Kernel32.ExceptionPointers): Kernel32.DWORD; 
	PROCEDURE ^ InQueue(queue: ProcessQueue; t: Process): BOOLEAN; 
	PROCEDURE ^ Remove(VAR queue: ProcessQueue; t: Process); 
	PROCEDURE ^ WriteType(obj: ANY); 
	PROCEDURE ^ terminate(t: Process); 
	PROCEDURE ^ {WINAPI} Wrapper(lpParameter: ANY): SIGNED32; 
	PROCEDURE ^ FinalizeProcess(t: ANY); 
	PROCEDURE ^ TerminateProc; 
	PROCEDURE ^ NewProcess(body: Body; priority: SIGNED32; flags: SET; obj: ProtectedObject; VAR new: Process); 
	PROCEDURE ^ CreateProcess*(body: Body; priority: SIGNED32; flags: SET; obj: ProtectedObject); 
	PROCEDURE ^ Lock*(obj: ProtectedObject; exclusive: BOOLEAN); 
	PROCEDURE ^ FindCondition(VAR q: ProcessQueue): Process; 
	PROCEDURE ^ Unlock*(obj: ProtectedObject; dummy: BOOLEAN); 
	PROCEDURE ^ Await*(cond: Condition; slink: SIGNED32; obj: ProtectedObject; flags: SET); 
	PROCEDURE ^ Break*(t: Process); 
	PROCEDURE ^ TerminateThis*(t: Process; halt: BOOLEAN); 
	PROCEDURE ^ Terminate*; 
	PROCEDURE ^ Init; 
	PROCEDURE ^ SetTimeout*(t: Timer; h: EventHandler; ms: SIGNED32); 
	PROCEDURE ^ SetTimeoutAt*(t: Timer; h: EventHandler; ms: SIGNED32); 
	PROCEDURE ^ CancelTimeout*(t: Timer); 
	PROCEDURE ^ InitEventHandling; 
	PROCEDURE ^ InitGCHandling; 
	PROCEDURE ^ GCStatusFactory(): Heaps.GCStatus; 
	PROCEDURE ^ InstallExceptionHandler*(e: ExceptionHandler); 
	PROCEDURE ^ UpdateProcessState*(p: Process); 
	PROCEDURE ^ NumReady*(): SIGNED32; 
	PROCEDURE ^ GetCpuCycles*(process: Process; VAR cpuCycles: CpuCyclesArray; all: BOOLEAN); 
	PROCEDURE ^ Suspend(p: Process); 
	PROCEDURE ^ Resume(p: Process); 
	PROCEDURE ^ SuspendActivities; 
	PROCEDURE ^ ResumeActivities; 
	PROCEDURE ^ CurrentProcessTime*(): SIGNED64; 
	PROCEDURE ^ TimerFrequency*(): SIGNED64; 
	PROCEDURE ^ LeaveA2*; 
	PROCEDURE ^ ReenterA2*; 
BEGIN
END Objects.
